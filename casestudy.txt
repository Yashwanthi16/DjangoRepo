log in:
	admin login

libranian:
	add new books to the inventory, update book details, and remove books.
	update user information, such as contact details.
	logged for auditing purposes.
	
	Library Class:
 	Implement a Library class to manage the list of books in the library, registered users, and transactions.
	Include methods to add new books, update book quantities, register new users, and keep track of book transactions.
	public class Library {
	 private List<Book> bookList;
 	 private List<User> userList;
 	 private List<Transaction> transactionHistory;
 		// Constructors, methods for book and user management, transactions, search, and filter
	}


user:
	public class User {
 		private String userId;
 		private String name;
 		private String contactInfo;
 		private List<Book> booksBorrowed;
 		// Constructors, methods for borrowing, returning, and fines
		fine calculation
		}

	methods for borrowing, returning, and fines
		fine calculation


Book class:
	Create a Book class with attributes such as bookId, title, author, genre, quantityAvailable, and totalQuantity.
	Implement appropriate getters and setters for the class.
	public class Book {
 	private String bookId;
 	private String title;
 	private String author;
 	private String genre;
 	private int quantityAvailable;
 	private int totalQuantity;
 	// Constructors, getters, and setters
	}


Transaction Class:
	Transaction History:
 Maintain a transaction history that records all book borrowings, returns, and fines.
	public class Transaction {
 	private String transactionId;
 	private String userId;
 	private String bookId;
 	private String transactionType;
 	private LocalDateTime transactionDate;
 	// Constructors, getters, and setters
}


database contains user info
book registry

output : in console:
admin? or user?

admin -> authentication ->success -> function call to his menu 
user -> his data + function call to his menu


	
